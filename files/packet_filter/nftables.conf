# ShieldWall managed

# system configuration that allows
#   the boxes to communicate to the controller and
#   basic management access to the controller

define IP4_ICMP_BASE = { destination-unreachable, echo-reply, echo-request, time-exceeded, parameter-problem };
define IP6_ICMP_BASE = { destination-unreachable, echo-reply, echo-request, time-exceeded, parameter-problem, packet-too-big };
define IP6_ICMP_ROUTE = { ind-neighbor-advert, ind-neighbor-solicit, nd-neighbor-advert, nd-neighbor-solicit, nd-router-solicit, nd-router-advert };
define IP4_NET_PRIVATE = { 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 };
define IP4_NET_BOGONS = { 0.0.0.0/8, 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.168.0.0/16, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4 };
define IP6_NET_BOGONS = { ::/128, ::1/128, ::ffff:0:0/96, ::/96, 100::/64, 2001:10::/28, 2001:db8::/32, fc00::/7, fe80::/10, fec0::/10, ff00::/8 };
# using BOGON 'TEST-NET-2' to keep us from having random routing issues
define IP4_NET_DOCKER = { 198.51.100.0/24 };

define PORT_CONTROLLER = { 443, 514, 900 };
define PORT_CONTROLLER_MGMT = { 22, 8443 };
define PORT_BOX_MGMT = { 22, 443 };
define IP4_CTRL = { 127.0.0.1 };
define IP6_CTRL = { ::1 };
# networks allowed to send data to the controller
define IP4_NET_BOXES = { 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 };
define IP6_NET_BOXES = { ::1 };
# networks allowed to access the controller webUI and SSH
define IP4_NET_MGMT = { 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 };
define IP6_NET_MGMT = { ::1 };


table inet managed {
  chain input_mangle {
    type filter hook input priority -150; policy accept;
  }

  chain output_mangle {
    type filter hook output priority -150;
  }

  chain output_route {
    type route hook output priority -150;
  }

  chain postrouting_mangle {
    type filter hook postrouting priority -150; policy accept;
  }

  chain prerouting_dnat {
    type nat hook prerouting priority -100;
  }

  chain output_dnat {
    type nat hook output priority -100;

    jump system_output_dnat
  }

  chain input {
    type filter hook input priority 0; policy drop;

    jump system_input

    tcp dport { 80, 443 } ct state new log prefix "NFTables ACCEPT input controller-web: "
    tcp dport { 80, 443 } accept

    # MARK: INSERT CTRL-SETUP input

    ct state established,related accept

    log prefix "NFTables DROP input default: "

  }

  chain output {
    type filter hook output priority 0; policy drop;

    jump system_output

    ct state established,related accept

    log prefix "NFTables DROP output default: "

  }

  chain forward {
    type filter hook forward priority 0; policy drop;

    jump system_forward

    ct state established,related accept

    log prefix "NFTables DROP forward default: "

  }

  chain postrouting_snat {
    type nat hook postrouting priority 100;

    jump system_postrouting_snat

  }

  chain system_output_dnat {
  }

  chain security_input {
    type filter hook input priority -10; policy accept;

    ct state invalid log prefix "NFTables CONTROLLER-DROP input invalid states: " drop
    ip frag-off & 0x1fff != 0 counter log prefix "NFTables CONTROLLER-DROP input IP fragments:  " drop
    tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|psh|ack|urg counter log prefix "NFTables CONTROLLER-DROP input TCP XMAS: " drop
    tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter log prefix "NFTables CONTROLLER-DROP input TCP NULL: " drop
    tcp flags syn tcp option maxseg size 1-536 counter log prefix "NFTables CONTROLLER-DROP input TCP MSS: " drop
    tcp flags & (fin|syn|rst|ack) != syn ct state new counter log prefix "NFTables CONTROLLER-DROP input TCP SYN CT NEW: " drop

  }

  chain system_input {
    # allow loopback traffic
    iifname "lo" accept

    # allow management access to webUI (grafana) & ssh
    tcp dport $PORT_CONTROLLER_MGMT ip saddr $IP4_NET_MGMT ct state new log prefix "NFTables CONTROLLER-ACCEPT controller management: "
    tcp dport $PORT_CONTROLLER_MGMT ip saddr $IP4_NET_MGMT accept
    tcp dport $PORT_CONTROLLER_MGMT ip6 saddr $IP6_NET_MGMT ct state new log prefix "NFTables CONTROLLER-ACCEPT controller management: "
    tcp dport $PORT_CONTROLLER_MGMT ip6 saddr $IP6_NET_MGMT accept

    # allow box to controller communication
    tcp dport $PORT_CONTROLLER ip saddr $IP4_NET_BOXES ct state new log prefix "NFTables CONTROLLER-ACCEPT box communication: "
    tcp dport $PORT_CONTROLLER ip saddr $IP4_NET_BOXES accept
    tcp dport $PORT_CONTROLLER ip6 saddr $IP6_NET_BOXES ct state new log prefix "NFTables CONTROLLER-ACCEPT box communication: "
    tcp dport $PORT_CONTROLLER ip6 saddr $IP6_NET_BOXES accept

    # allow boxes to ping/traceroute the controller
    meta l4proto icmp ip saddr $IP4_NET_BOXES accept
    meta l4proto icmpv6 ip6 saddr $IP6_NET_BOXES accept

    # allow icmpv6 necessary for ipv6 to work
    ip6 nexthdr icmpv6 icmpv6 type $IP6_ICMP_BASE accept
    ip6 nexthdr icmpv6 ip6 hoplimit 1 icmpv6 type $IP6_ICMP_ROUTE accept
    ip6 nexthdr icmpv6 ip6 hoplimit 255 icmpv6 type $IP6_ICMP_ROUTE accept

  }

  chain system_output {
    # allow loopback traffic
    oifname "lo" accept

    # allow internal docker communication
    meta l4proto { tcp, udp, icmp } ip saddr $IP4_NET_DOCKER ip daddr $IP4_NET_DOCKER accept

    # allow communication with boxes
    tcp dport $PORT_BOX_MGMT ip daddr $IP4_NET_BOXES ct state new log prefix "NFTables CONTROLLER-ACCEPT output boxes: "
    tcp dport $PORT_BOX_MGMT ip daddr $IP4_NET_BOXES accept
    tcp dport $PORT_BOX_MGMT ip6 daddr $IP6_NET_BOXES ct state new log prefix "NFTables CONTROLLER-ACCEPT output boxes: "
    tcp dport $PORT_BOX_MGMT ip6 daddr $IP6_NET_BOXES accept

    # allow icmp originating from box
    icmp type $IP4_ICMP_BASE accept
    icmp code 30 accept

    # allow icmpv6 necessary for ipv6 to work
    ip6 nexthdr icmpv6 icmpv6 type $IP6_ICMP_BASE accept
    ip6 nexthdr icmpv6 ip6 hoplimit 1 icmpv6 type $IP6_ICMP_ROUTE accept
    ip6 nexthdr icmpv6 ip6 hoplimit 255 icmpv6 type $IP6_ICMP_ROUTE accept

    # todo: limit destination to configured dns/ntp servers
    # allow dns
    tcp dport { 53, 853 } ct state new log prefix "NFTables CONTROLLER-ACCEPT output DNS: "
    tcp dport { 53, 853 } accept
    udp dport 53 log prefix "NFTables CONTROLLER-ACCEPT output DNS: " accept

    # allow ntp
    tcp dport 123 ct state new log prefix "NFTables CONTROLLER-ACCEPT output NTP: "
    tcp dport 123 accept
    udp dport 123 log prefix "NFTables CONTROLLER-ACCEPT output NTP: " accept

    # allow system traffic (updates, and so on)
    tcp dport { 80, 443 } ct state new log prefix "NFTables CONTROLLER-ACCEPT output HTTP+S: "
    tcp dport { 80, 443 } accept

  }

  chain system_forward {

    # allow internal docker communication
    meta l4proto { tcp, udp, icmp } ip saddr $IP4_NET_DOCKER ip daddr $IP4_NET_DOCKER accept

    # allow icmpv6 necessary for ipv6 to work
    ip6 nexthdr icmpv6 icmpv6 type $IP6_ICMP_BASE accept
    ip6 nexthdr icmpv6 ip6 hoplimit 1 icmpv6 type $IP6_ICMP_ROUTE accept
    ip6 nexthdr icmpv6 ip6 hoplimit 255 icmpv6 type $IP6_ICMP_ROUTE accept

    # allow docker system traffic (updates, and so on)
    ip saddr $IP4_NET_DOCKER udp dport { 53, 853 } log prefix "NFTables CONTROLLER-ACCEPT forward Docker DNS: " accept
    ip saddr $IP4_NET_DOCKER tcp dport { 80, 443 } ct state new log prefix "NFTables CONTROLLER-ACCEPT forward Docker HTTP+S: "
    ip saddr $IP4_NET_DOCKER tcp dport { 80, 443 } accept

  }

  chain system_postrouting_snat {

    ip saddr $IP4_CTRL ip daddr != $IP4_NET_PRIVATE masquerade
    ip saddr $IP4_NET_DOCKER ip daddr != $IP4_NET_DOCKER masquerade

  }

}
